{
  "consumes": [
    "application/json"
  ],
  "produces": [
    "application/json"
  ],
  "schemes": [
    "https",
    "http"
  ],
  "swagger": "2.0",
  "info": {
    "description": "LightStep x[PM] JSON APIs",
    "title": "LightStep Public API",
    "termsOfService": "This is an early-access API that may change.",
    "version": "0.2"
  },
  "host": "api.lightstep.com",
  "basePath": "/public/v0.2",
  "paths": {
    "/{organization}/projects": {
      "get": {
        "description": "Returns information about all projects in an organization",
        "produces": [
          "application/json"
        ],
        "tags": [
          "Projects"
        ],
        "summary": "List Projects",
        "operationId": "listProjectsID",
        "parameters": [
          {
            "type": "string",
            "description": "Name of the customer organization",
            "name": "organization",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "JSON-formatted metadata about all projects in the organization"
          },
          "400": {
            "description": "No organization parameter provided"
          },
          "401": {
            "description": "The API Key does not provide access to this resource, or the organization name does not exist"
          }
        }
      }
    },
    "/{organization}/projects/{project}": {
      "get": {
        "description": "Returns information about a specific project",
        "produces": [
          "application/json"
        ],
        "tags": [
          "Projects"
        ],
        "summary": "Get Project",
        "operationId": "getProjectID",
        "parameters": [
          {
            "type": "string",
            "description": "Name of the customer organization",
            "name": "organization",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "Name of the customer project",
            "name": "project",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "JSON-formatted metadata about all projects in the project"
          },
          "401": {
            "description": "The API Key does not provide access to this resource, or the organization name does not exist"
          },
          "404": {
            "description": "Project name is not found"
          }
        }
      }
    },
    "/{organization}/projects/{project}/conditions": {
      "get": {
        "description": "Returns information about all conditions in a project",
        "produces": [
          "application/json"
        ],
        "tags": [
          "Conditions"
        ],
        "summary": "List Conditions",
        "operationId": "listConditionsID",
        "parameters": [
          {
            "type": "string",
            "description": "Name of the customer organization",
            "name": "organization",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "Name of the customer project",
            "name": "project",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "JSON-formatted metadata about all conditions in the project"
          },
          "401": {
            "description": "The API Key does not provide access to this resource, or the organization name does not exist"
          },
          "404": {
            "description": "Project name is not found"
          }
        }
      },
      "post": {
        "description": "Creates a new condition. You create conditions for thresholds that mark [SLAs or metrics](https://docs.lightstep.com/docs/create-alert-conditions-and-rules) on a Stream that you want to be warned about.",
        "produces": [
          "application/json"
        ],
        "tags": [
          "Conditions"
        ],
        "summary": "Create Condition",
        "operationId": "postConditionID",
        "parameters": [
          {
            "description": "Condition definition",
            "name": "data",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/conditionRequestBody"
            }
          },
          {
            "type": "string",
            "description": "Name of the customer organization",
            "name": "organization",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "Name of the customer project",
            "name": "project",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "The condition was created successfully"
          },
          "401": {
            "description": "The API Key does not provide access to this resource, or the organization name does not exist"
          },
          "404": {
            "description": "Project name is not found"
          }
        }
      }
    },
    "/{organization}/projects/{project}/conditions/{condition-id}": {
      "get": {
        "description": "Returns information about a specific condition. Include the organization, project, and condition identifier in the path parameter.",
        "produces": [
          "application/json"
        ],
        "tags": [
          "Conditions"
        ],
        "summary": "Get Condition",
        "operationId": "getConditionID",
        "parameters": [
          {
            "type": "string",
            "description": "Name of the customer organization",
            "name": "organization",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "Name of the customer project",
            "name": "project",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "Condition identifier",
            "name": "condition-id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "JSON-formatted data about the given condition"
          },
          "401": {
            "description": "The API Key does not provide access to this resource, or the organization name does not exist"
          },
          "404": {
            "description": "Project name is not found"
          },
          "500": {
            "description": "The condition identifier is not valid"
          }
        }
      },
      "delete": {
        "description": "Deletes an existing condition",
        "produces": [
          "application/json"
        ],
        "tags": [
          "Conditions"
        ],
        "summary": "Delete Condition",
        "operationId": "deleteConditionID",
        "parameters": [
          {
            "type": "string",
            "description": "Name of the customer organization",
            "name": "organization",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "Name of the customer project",
            "name": "project",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "Identifier of the condition to delete",
            "name": "condition-id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "204": {
            "description": "Condition was successfully deleted"
          },
          "401": {
            "description": "The API Key does not provide access to this resource, or the organization name does not exist"
          },
          "404": {
            "description": "Project name is not found"
          }
        }
      },
      "patch": {
        "description": "Modifies the settings for an existing condition. You cannot modify the condition to refer to a different stream.",
        "produces": [
          "application/json"
        ],
        "tags": [
          "Conditions"
        ],
        "summary": "Update Condition",
        "operationId": "patchConditionID",
        "parameters": [
          {
            "description": "Condition definition",
            "name": "data",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/conditionRequestBody"
            }
          },
          {
            "type": "string",
            "description": "Name of the customer organization",
            "name": "organization",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "Name of the customer project",
            "name": "project",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "Identifier of the condition to modify",
            "name": "condition-id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "The condition was updated successfully"
          },
          "400": {
            "description": "One or more parameter(s) are not valid"
          },
          "401": {
            "description": "The API Key does not provide access to this resource, or the organization name does not exist"
          },
          "404": {
            "description": "Project name is not found"
          },
          "500": {
            "description": "Condition identifier not found"
          }
        }
      }
    },
    "/{organization}/projects/{project}/conditions/{condition-id}/status": {
      "get": {
        "description": "Returns status information about a specific condition",
        "produces": [
          "application/json"
        ],
        "tags": [
          "Conditions"
        ],
        "summary": "Get Condition Status",
        "operationId": "getConditionStatusID",
        "parameters": [
          {
            "type": "string",
            "description": "Name of the customer organization",
            "name": "organization",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "Name of the customer project",
            "name": "project",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "Condition identifier",
            "name": "condition-id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "JSON-formatted data about the status of the given condition"
          },
          "401": {
            "description": "The API Key does not provide access to this resource, or the organization name does not exist"
          },
          "404": {
            "description": "Project name is not found"
          },
          "500": {
            "description": "The condition identifier is not valid"
          }
        }
      }
    },
    "/{organization}/projects/{project}/dashboard/{dashboard-id}": {
      "delete": {
        "description": "Deletes an existing dashboard. Deleting a dashboard only deletes the dashboard; the Streams are still available.",
        "produces": [
          "application/json"
        ],
        "tags": [
          "Dashboards"
        ],
        "summary": "Delete Dashboard",
        "operationId": "deleteDashboardID",
        "parameters": [
          {
            "type": "string",
            "description": "Name of the customer organization",
            "name": "organization",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "Name of the customer project",
            "name": "project",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "Identifier of the dashboard to delete",
            "name": "dashboard-id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "204": {
            "description": "Dashboard was successfully deleted"
          },
          "401": {
            "description": "The API Key does not provide access to this resource, or the organization name does not exist"
          },
          "404": {
            "description": "Project name is not found"
          },
          "500": {
            "description": "Dashboard identifier not found"
          }
        }
      }
    },
    "/{organization}/projects/{project}/dashboards": {
      "get": {
        "description": "Returns information about all dashboards in a project",
        "produces": [
          "application/json"
        ],
        "tags": [
          "Dashboards"
        ],
        "summary": "List Dashboards",
        "operationId": "listDashboardsID",
        "parameters": [
          {
            "type": "string",
            "description": "Name of the customer organization",
            "name": "organization",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "Name of the customer project",
            "name": "project",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "JSON-formatted metadata about all dashboards in the project"
          },
          "401": {
            "description": "The API Key does not provide access to this resource, or the organization name does not exist"
          },
          "404": {
            "description": "Project name is not found"
          }
        }
      },
      "post": {
        "description": "Creates a new dashboard, with inline stream definitions. Automatically creates the necessary streams if they do not already exist.",
        "produces": [
          "application/json"
        ],
        "tags": [
          "Dashboards"
        ],
        "summary": "Create Dashboard",
        "operationId": "createDashboardID",
        "parameters": [
          {
            "description": "Dashboard definition",
            "name": "data",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/dashboardRequestBody"
            }
          },
          {
            "type": "string",
            "description": "Name of the customer organization",
            "name": "organization",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "Name of the customer project",
            "name": "project",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "The dashboard was created (or updated) successfully"
          },
          "400": {
            "description": "No organization parameter provided"
          },
          "401": {
            "description": "The API Key does not provide access to this resource, or the organization name does not exist"
          },
          "404": {
            "description": "Project name is not found"
          }
        }
      }
    },
    "/{organization}/projects/{project}/dashboards/{dashboard-id}": {
      "get": {
        "description": "Returns complete information about a specific dashboard, including stream definitions",
        "produces": [
          "application/json"
        ],
        "tags": [
          "Dashboards"
        ],
        "summary": "Get Dashboard",
        "operationId": "getDashboardID",
        "parameters": [
          {
            "type": "string",
            "description": "Name of the customer organization",
            "name": "organization",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "Name of the customer project",
            "name": "project",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "Dashboard identifier",
            "name": "dashboard-id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "JSON-formatted metadata about the dashboard"
          },
          "401": {
            "description": "The API Key does not provide access to this resource, or the organization name does not exist"
          },
          "404": {
            "description": "Project name or dashboard ID is not found"
          }
        }
      },
      "patch": {
        "description": "Updates the dashboard with a new name (if applicable), and replaces the set of streams on the dashboard. Streams that are removed from the dashboard will not be deleted from the project. Streams that are not supplied are removed from the dashboard.",
        "produces": [
          "application/json"
        ],
        "tags": [
          "Dashboards"
        ],
        "summary": "Update Dashboard",
        "operationId": "patchDashboardID",
        "parameters": [
          {
            "description": "Dashboard definition",
            "name": "data",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/dashboardRequestBody"
            }
          },
          {
            "type": "string",
            "description": "Name of the customer organization",
            "name": "organization",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "Name of the customer project",
            "name": "project",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "Identifier of the dashboard to modify",
            "name": "dashboard-id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "The dashboard was updated successfully"
          },
          "400": {
            "description": "One or more parameter(s) are not valid"
          },
          "401": {
            "description": "The API Key does not provide access to this resource, or the organization name does not exist"
          },
          "404": {
            "description": "Project name is not found"
          },
          "500": {
            "description": "Dashboard identifier not found"
          }
        }
      }
    },
    "/{organization}/projects/{project}/destinations": {
      "get": {
        "description": "Returns information about all destinations in a project. Include the organization and project in the path parameter.",
        "produces": [
          "application/json"
        ],
        "tags": [
          "Destinations"
        ],
        "summary": "List Destinations",
        "operationId": "listDestinations",
        "parameters": [
          {
            "type": "string",
            "description": "Name of the customer organization",
            "name": "organization",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "Name of the customer project",
            "name": "project",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "JSON-formatted data about the given destination"
          },
          "401": {
            "description": "The API key does not provide access to this resource (such as a project or organization)"
          },
          "404": {
            "description": "Project name is not found"
          },
          "500": {
            "description": "Internal service error (retryable)"
          }
        }
      },
      "post": {
        "description": "Creates a new destination. Note: To create a Slack destination, you must first [enable a Slack workspace integration](https://docs.lightstep.com/docs/create-and-manage-destinations#add-a-slack-workspace-integration) in the General Settings page. To create a PagerDuty destination, you must provide a [PagerDuty integration key](https://support.pagerduty.com/docs/services-and-integrations).",
        "produces": [
          "application/json"
        ],
        "tags": [
          "Destinations"
        ],
        "summary": "Create Destination",
        "operationId": "postDestinationID",
        "parameters": [
          {
            "description": "Destination definition",
            "name": "data",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/destinationRequestBodyExample"
            }
          },
          {
            "type": "string",
            "description": "Name of the customer organization",
            "name": "organization",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "Name of the customer project",
            "name": "project",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "The destination was created successfully"
          },
          "401": {
            "description": "The API key does not provide access to this resource (such as a project or organization)"
          },
          "404": {
            "description": "Project name is not found"
          },
          "500": {
            "description": "Internal service error (retryable)"
          }
        }
      }
    },
    "/{organization}/projects/{project}/destinations/{destination-id}": {
      "get": {
        "description": "Returns information about a specific destination. Include the organization, project, and destination identifier in the path parameter.",
        "produces": [
          "application/json"
        ],
        "tags": [
          "Destinations"
        ],
        "summary": "Get Destination",
        "operationId": "getDestinationID",
        "parameters": [
          {
            "type": "string",
            "description": "Name of the customer organization",
            "name": "organization",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "Name of the customer project",
            "name": "project",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "Destination identifier",
            "name": "destination-id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "JSON-formatted data about the given destination"
          },
          "401": {
            "description": "The API key does not provide access to this resource (such as a project or organization)"
          },
          "404": {
            "description": "Project name is not found or destination identifier is not found"
          },
          "500": {
            "description": "Internal service error (retryable)"
          }
        }
      },
      "delete": {
        "description": "Deletes an existing destination",
        "produces": [
          "application/json"
        ],
        "tags": [
          "Destinations"
        ],
        "summary": "Delete Destination",
        "operationId": "deleteDestinationID",
        "parameters": [
          {
            "type": "string",
            "description": "Name of the customer organization",
            "name": "organization",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "Name of the customer project",
            "name": "project",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "Identifier of the destination to delete",
            "name": "destination-id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "204": {
            "description": "The destination was successfully deleted"
          },
          "401": {
            "description": "The API Key does not provide access to this resource"
          },
          "404": {
            "description": "Project name or destination ID is not found"
          },
          "500": {
            "description": "Internal service error (retryable)"
          }
        }
      }
    },
    "/{organization}/projects/{project}/directory/services": {
      "get": {
        "description": "Returns all reporting services for a project",
        "produces": [
          "application/json"
        ],
        "tags": [
          "Services"
        ],
        "summary": "List Services",
        "operationId": "listServicesID",
        "parameters": [
          {
            "type": "string",
            "description": "Name of the customer organization",
            "name": "organization",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "Name of the customer project",
            "name": "project",
            "in": "path",
            "required": true
          },
          {
            "type": "integer",
            "description": "Service object count limit in paginated response",
            "name": "limit",
            "in": "query"
          },
          {
            "type": "integer",
            "description": "Service object offset in paginated response",
            "name": "offset",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "JSON-formatted metadata about all services reporting in the project"
          },
          "400": {
            "description": "One or more parameter(s) are not valid"
          },
          "401": {
            "description": "The API Key does not provide access to this resource, or the organization name does not exist"
          },
          "404": {
            "description": "Project name is not found"
          }
        }
      }
    },
    "/{organization}/projects/{project}/snapshots": {
      "post": {
        "description": "Creates a new Snapshot for the provided query",
        "produces": [
          "application/json"
        ],
        "tags": [
          "Snapshots"
        ],
        "summary": "Create Snapshot",
        "operationId": "createSnapshot",
        "parameters": [
          {
            "description": "Span query to create a snapshot for",
            "name": "data",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/snapshotCreate"
            }
          },
          {
            "type": "string",
            "description": "Name of the customer organization",
            "name": "organization",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "Name of the customer project",
            "name": "project",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "The snapshot was created successfully"
          },
          "400": {
            "description": "Query parameters invalid"
          },
          "401": {
            "description": "The API Key does not provide access to this resource, or the organization name does not exist"
          },
          "404": {
            "description": "Project name is not found"
          },
          "429": {
            "description": "Snapshot creation exceeded rate limit"
          }
        }
      }
    },
    "/{organization}/projects/{project}/stored-traces": {
      "get": {
        "description": "Returns complete traces that have already been assembled and stored. You must include a [span-id](https://docs.lightstep.com/docs/spans-in-opentelemetry) as a query parameter.",
        "produces": [
          "application/json"
        ],
        "tags": [
          "Traces"
        ],
        "summary": "Stored Traces",
        "operationId": "storedTracesID",
        "parameters": [
          {
            "type": "string",
            "description": "Name of the customer organization",
            "name": "organization",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "Name of the project that the trace belongs to",
            "name": "project",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "Key that uniquely identifies a stored trace",
            "name": "span-id",
            "in": "query",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "JSON representation of a stored trace"
          },
          "400": {
            "description": "Missing required parameter"
          },
          "404": {
            "description": "No stored traces found"
          }
        }
      }
    },
    "/{organization}/projects/{project}/streams": {
      "get": {
        "description": "Returns information about all streams in a project",
        "produces": [
          "application/json"
        ],
        "tags": [
          "Streams"
        ],
        "summary": "List Streams",
        "operationId": "listStreamsID",
        "parameters": [
          {
            "type": "string",
            "description": "Name of the customer organization",
            "name": "organization",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "Name of the customer project",
            "name": "project",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "JSON-formatted metadata about all streams in the project"
          },
          "401": {
            "description": "The API Key does not provide access to this resource, or the organization name does not exist"
          },
          "404": {
            "description": "Project name is not found"
          }
        }
      },
      "post": {
        "description": "Creates a new stream (or updates an existing stream if the query is identical). You do not need to include a clientID.",
        "produces": [
          "application/json"
        ],
        "tags": [
          "Streams"
        ],
        "summary": "Create Stream",
        "operationId": "postStreamID",
        "parameters": [
          {
            "description": "Stream definition",
            "name": "data",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/createOrUpdateBody"
            }
          },
          {
            "type": "string",
            "description": "Name of the customer organization",
            "name": "organization",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "Name of the customer project",
            "name": "project",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "The stream was created (or updated) successfully"
          },
          "401": {
            "description": "The API Key does not provide access to this resource, or the organization name does not exist"
          },
          "404": {
            "description": "Project name is not found"
          }
        }
      }
    },
    "/{organization}/projects/{project}/streams/{stream-id}": {
      "get": {
        "description": "Returns information about a specific stream",
        "produces": [
          "application/json"
        ],
        "tags": [
          "Streams"
        ],
        "summary": "Get Stream",
        "operationId": "getStreamID",
        "parameters": [
          {
            "type": "string",
            "description": "Name of the customer organization",
            "name": "organization",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "Name of the customer project",
            "name": "project",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "Stream identifier",
            "name": "stream-id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "JSON-formatted data about the given stream"
          },
          "401": {
            "description": "The API Key does not provide access to this resource, or the organization name does not exist"
          },
          "404": {
            "description": "Project name is not found"
          },
          "500": {
            "description": "The stream identifier is not valid"
          }
        }
      },
      "delete": {
        "description": "Deletes an existing stream. Deleting a stream also deletes all historical data persisted for that stream and cannot be undone, so be sure you want to delete it.",
        "produces": [
          "application/json"
        ],
        "tags": [
          "Streams"
        ],
        "summary": "Delete Stream",
        "operationId": "deleteStreamID",
        "parameters": [
          {
            "type": "string",
            "description": "Name of the customer organization",
            "name": "organization",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "Name of the customer project",
            "name": "project",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "Identifier of the stream to delete",
            "name": "stream-id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "204": {
            "description": "Stream was successfully deleted"
          },
          "401": {
            "description": "The API Key does not provide access to this resource, or the organization name does not exist"
          },
          "404": {
            "description": "Project name is not found"
          }
        }
      },
      "patch": {
        "description": "Modifies the settings for an existing stream, to provide more descriptive info about it. A clientID must be supplied. By default, streams are given the query parameters as the name and cannot be updated using the query field (results in a error).",
        "produces": [
          "application/json"
        ],
        "tags": [
          "Streams"
        ],
        "summary": "Update Stream",
        "operationId": "patchStreamID",
        "parameters": [
          {
            "description": "Stream definition",
            "name": "data",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/createOrUpdateBody"
            }
          },
          {
            "type": "string",
            "description": "Name of the customer organization",
            "name": "organization",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "Name of the customer project",
            "name": "project",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "Identifier of the stream to modify",
            "name": "stream-id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "The stream was created (or updated) successfully"
          },
          "400": {
            "description": "One or more parameter(s) are not valid"
          },
          "401": {
            "description": "The API Key does not provide access to this resource, or the organization name does not exist"
          },
          "404": {
            "description": "Project name is not found"
          },
          "500": {
            "description": "Stream identifier not found"
          }
        }
      }
    },
    "/{organization}/projects/{project}/streams/{stream-id}/conditions": {
      "get": {
        "description": "Returns information about all conditions in a specific stream. You can create multiple conditions for a Stream. For example, you might create one condition for a \"warning\" threshold and another for a \"critical\" threshold. Or, you might want to have different thresholds for multiple percentiles (e.g., the 99th percentile can exceed 100ms, but your 50th percentile should never exceed 50ms).",
        "produces": [
          "application/json"
        ],
        "tags": [
          "Conditions"
        ],
        "summary": "List Conditions for Stream",
        "operationId": "listConditionsForStreamID",
        "parameters": [
          {
            "type": "string",
            "description": "Name of the customer organization",
            "name": "organization",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "Name of the customer project",
            "name": "project",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "Stream identifier",
            "name": "stream-id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "JSON-formatted metadata about all conditions in the given stream"
          },
          "401": {
            "description": "The API Key does not provide access to this resource, or the organization name does not exist"
          },
          "404": {
            "description": "Project name is not found"
          },
          "500": {
            "description": "The stream identifier is not valid"
          }
        }
      }
    },
    "/{organization}/projects/{project}/streams/{stream-id}/timeseries": {
      "get": {
        "description": "Returns timeseries data for a stream",
        "produces": [
          "application/json"
        ],
        "tags": [
          "Streams"
        ],
        "summary": "Timeseries",
        "operationId": "timeseriesID",
        "parameters": [
          {
            "type": "string",
            "description": "Name of the customer organization",
            "name": "organization",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "Name of the project that contains the stream",
            "name": "project",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "The ID of the stream to fetch timeseries data for",
            "name": "stream-id",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "format": "date-time",
            "description": "Beginning of the time range being queried, e.g., 2018-01-20T02:30:00-08:00",
            "name": "oldest-time",
            "in": "query",
            "required": true
          },
          {
            "type": "string",
            "format": "date-time",
            "description": "End of the time range being queried, e.g., 2018-01-22T06:30:00-08:00",
            "name": "youngest-time",
            "in": "query",
            "required": true
          },
          {
            "minimum": 60000,
            "type": "integer",
            "default": 60000,
            "description": "Length of time represented by each \"point\" (time window) in the timeseries, in milliseconds. The minimum value (highest resolution data) for this parameter is 60000 (representing 1 minute of data per point). Larger values will result in latency distributions being merged.",
            "name": "resolution-ms",
            "in": "query",
            "required": true
          },
          {
            "maximum": 1,
            "minimum": 0,
            "type": "integer",
            "default": 0,
            "description": "Boolean value that indicates whether the response should include example trace information for each time window. 0=false, 1=true",
            "name": "include-exemplars",
            "in": "query"
          },
          {
            "maximum": 1,
            "minimum": 0,
            "type": "integer",
            "default": 0,
            "description": "Indicates whether the response should specify the number of spans represented by each time window. 0=false, 1=true",
            "name": "include-ops-counts",
            "in": "query"
          },
          {
            "maximum": 1,
            "minimum": 0,
            "type": "integer",
            "default": 0,
            "description": "Indicates whether the response should specify the number of spans with errors in each time window. 0=false, 1=true",
            "name": "include-error-counts",
            "in": "query"
          },
          {
            "type": "array",
            "items": {
              "type": "number"
            },
            "collectionFormat": "multi",
            "description": "A (possibly) repeated field that indicates what latency percentiles to return for each time window, if any. Valid for values [0, 99.99].",
            "name": "percentile",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "JSON representation of a timeseries"
          },
          "400": {
            "description": "One or more of the request parameter(s) is not valid"
          },
          "401": {
            "description": "The API Key does not provide access to this resource"
          },
          "404": {
            "description": "Project name is not found"
          },
          "500": {
            "description": "Stream ID is not valid, or other internal error"
          }
        }
      }
    },
    "/{organization}/projects/{project}/wf_links": {
      "get": {
        "description": "Returns information on all workflow link definitions within a project",
        "produces": [
          "application/json"
        ],
        "tags": [
          "WorkflowLinks"
        ],
        "summary": "List Workflow Links",
        "operationId": "listWorkflowLinksID",
        "parameters": [
          {
            "type": "string",
            "description": "Name of the customer organization",
            "name": "organization",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "Name of the customer project",
            "name": "project",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "JSON-formatted metadata about all workflow link definitions in the project"
          },
          "401": {
            "description": "The API Key does not provide access to this resource"
          },
          "404": {
            "description": "Organization or project not found"
          }
        }
      },
      "post": {
        "description": "Creates a new workflow link. Links within a project must have a unique combination of Name and URL. Admin or Member privileges are required to create workflow links. Workflow name can also include [variables](https://docs.lightstep.com/docs/links-reference), allowing the link name to change dynamically based on the span being viewed.",
        "produces": [
          "application/json"
        ],
        "tags": [
          "WorkflowLinks"
        ],
        "summary": "Create Workflow Link",
        "operationId": "createWorkflowLinkID",
        "parameters": [
          {
            "description": "Workflow Link definition",
            "name": "data",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/externalLinkRequestBody"
            }
          },
          {
            "type": "string",
            "description": "Name of the customer organization",
            "name": "organization",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "Name of the customer project",
            "name": "project",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "The workflow link was created successfully"
          },
          "400": {
            "description": "Bad request - could not decode JSON request, or a parameter (name, URL, or Rules) is missing"
          },
          "401": {
            "description": "The API Key does not provide access to this resource"
          },
          "403": {
            "description": "Unsupported request to create resource - links within the same project cannot have the same name and URL."
          },
          "404": {
            "description": "Organization or project not found"
          }
        }
      }
    },
    "/{organization}/projects/{project}/wf_links/{link-id}": {
      "get": {
        "description": "Returns information on a specific workflow link definition within a project",
        "produces": [
          "application/json"
        ],
        "tags": [
          "WorkflowLinks"
        ],
        "summary": "Get Workflow Link",
        "operationId": "getWorkflowLinkID",
        "parameters": [
          {
            "type": "string",
            "description": "Name of the customer organization",
            "name": "organization",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "Name of the customer project",
            "name": "project",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "Workflow Link identifier",
            "name": "link-id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "JSON-formatted metadata about the workflow link"
          },
          "401": {
            "description": "The API Key does not provide access to this resource"
          },
          "404": {
            "description": "Organization, project name, or workflow link ID is not found"
          }
        }
      },
      "delete": {
        "description": "Deletes an existing workflow link",
        "produces": [
          "application/json"
        ],
        "tags": [
          "WorkflowLinks"
        ],
        "summary": "Delete Workflow Link",
        "operationId": "deleteWorkflowLinkID",
        "parameters": [
          {
            "type": "string",
            "description": "Name of the customer organization",
            "name": "organization",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "Name of the customer project",
            "name": "project",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "Identifier of the workflow link to delete",
            "name": "link-id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "204": {
            "description": "The workflow link was successfully deleted"
          },
          "401": {
            "description": "The API Key does not provide access to this resource"
          },
          "404": {
            "description": "Organization, project name, or workflow link ID is not found"
          }
        }
      },
      "patch": {
        "description": "Updates the workflow link with a new name or URL (if applicable), or replaces the set of rules on the workflow link. If a non-empty parameter (i.e., name, URL, or Rules) is provided, the field will be overwritten with the new value. Links within a project must have a unique combination of name and URL. Admin or Member privileges are required to update workflow links. Searches that are not supplied are removed from the workflow link.",
        "produces": [
          "application/json"
        ],
        "tags": [
          "WorkflowLinks"
        ],
        "summary": "Update Workflow Link",
        "operationId": "patchWorkflowLinkID",
        "parameters": [
          {
            "description": "Workflow Link definition",
            "name": "data",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/externalLinkRequestBody"
            }
          },
          {
            "type": "string",
            "description": "Name of the customer organization",
            "name": "organization",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "Name of the customer project",
            "name": "project",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "Identifier of the workflow link to modify",
            "name": "link-id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "The workflow link was updated successfully"
          },
          "400": {
            "description": "Bad request - could not decode JSON request"
          },
          "401": {
            "description": "The API Key does not provide access to this resource"
          },
          "403": {
            "description": "Unsupported request to create resource - links within the same project cannot have the same name and URL."
          },
          "404": {
            "description": "Organization, project name, or workflow link ID is not found"
          }
        }
      }
    },
    "/{organization}/test": {
      "get": {
        "description": "A read-only endpoint for testing your authentication key",
        "produces": [
          "application/text"
        ],
        "tags": [
          "Test"
        ],
        "summary": "Read Test",
        "operationId": "testReadID",
        "parameters": [
          {
            "type": "string",
            "description": "Name of the customer organization",
            "name": "organization",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "OK!"
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      },
      "post": {
        "description": "A write endpoint for testing your authentication key",
        "produces": [
          "application/text"
        ],
        "tags": [
          "Test"
        ],
        "summary": "Write Test",
        "operationId": "testWriteID",
        "parameters": [
          {
            "type": "string",
            "description": "Name of the customer organization",
            "name": "organization",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "OK!"
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      }
    }
  },
  "definitions": {
    "Links": {
      "type": "object",
      "additionalProperties": {
        "type": "object"
      },
      "x-go-package": "github.com/lightstep/crouton/service/api/jsonapi/v02"
    },
    "LinksObj": {
      "type": "object",
      "properties": {
        "links": {
          "$ref": "#/definitions/Links"
        }
      },
      "x-go-package": "github.com/lightstep/crouton/service/api/jsonapi/v02"
    },
    "Micros": {
      "type": "integer",
      "format": "int64",
      "x-go-package": "github.com/lightstep/common-go/base"
    },
    "Name": {
      "type": "string",
      "x-go-package": "github.com/lightstep/crouton/service/api/types"
    },
    "RelatedResourceObject": {
      "type": "object",
      "required": [
        "type",
        "id"
      ],
      "properties": {
        "id": {
          "description": "Unique identifier of the related resource",
          "type": "string",
          "x-go-name": "ID"
        },
        "type": {
          "description": "Valid values:\nStream resource: \"stream\"\nCondition resource: \"condition\"",
          "type": "string",
          "x-go-name": "Type"
        }
      },
      "x-go-package": "github.com/lightstep/crouton/service/api/jsonapi/v02"
    },
    "Rules": {
      "type": "object",
      "additionalProperties": {
        "type": "array",
        "items": {
          "type": "string"
        }
      },
      "x-go-package": "github.com/lightstep/crouton/service/api/types"
    },
    "URL": {
      "type": "string",
      "x-go-package": "github.com/lightstep/crouton/service/api/types"
    },
    "conditionRequest": {
      "type": "object",
      "required": [
        "type"
      ],
      "properties": {
        "attributes": {
          "$ref": "#/definitions/conditionRequestAttributes"
        },
        "id": {
          "description": "Unique identifier of the described resource.\nDo not populate this field for POST or PATCH requests; use path parameters instead.",
          "type": "string",
          "x-go-name": "ID"
        },
        "relationships": {
          "$ref": "#/definitions/conditionRequestRelationships"
        },
        "type": {
          "description": "Valid values:\nStream operations: \"stream\"\nCondition operations: \"condition\"",
          "type": "string",
          "x-go-name": "Type"
        }
      },
      "x-go-package": "github.com/lightstep/crouton/service/api/public/v02/handlers"
    },
    "conditionRequestAttributes": {
      "type": "object",
      "properties": {
        "custom-data": {
          "type": "object",
          "additionalProperties": {
            "type": "object"
          },
          "x-go-name": "CustomData"
        },
        "eval-window-ms": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "EvaluationWindowMs"
        },
        "expression": {
          "type": "string",
          "x-go-name": "Expression"
        },
        "name": {
          "type": "string",
          "x-go-name": "Name"
        }
      },
      "x-go-package": "github.com/lightstep/crouton/service/api/public/v02/handlers"
    },
    "conditionRequestBody": {
      "type": "object",
      "properties": {
        "data": {
          "$ref": "#/definitions/conditionRequest"
        }
      },
      "x-go-package": "github.com/lightstep/crouton/service/api/public/v02/handlers"
    },
    "conditionRequestRelationships": {
      "type": "object",
      "properties": {
        "stream": {
          "$ref": "#/definitions/RelatedResourceObject"
        }
      },
      "x-go-package": "github.com/lightstep/crouton/service/api/public/v02/handlers"
    },
    "createAccessTokenAttributes": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "x-go-name": "Name"
        }
      },
      "x-go-package": "github.com/lightstep/crouton/service/api/public/v02/handlers"
    },
    "createAccessTokenBody": {
      "type": "object",
      "properties": {
        "data": {
          "$ref": "#/definitions/createAccessTokenRequest"
        }
      },
      "x-go-package": "github.com/lightstep/crouton/service/api/public/v02/handlers"
    },
    "createAccessTokenRequest": {
      "type": "object",
      "properties": {
        "attributes": {
          "$ref": "#/definitions/createAccessTokenAttributes"
        }
      },
      "x-go-package": "github.com/lightstep/crouton/service/api/public/v02/handlers"
    },
    "createOrUpdateBody": {
      "type": "object",
      "properties": {
        "data": {
          "$ref": "#/definitions/createOrUpdateRequest"
        }
      },
      "x-go-package": "github.com/lightstep/crouton/service/api/public/v02/handlers"
    },
    "createOrUpdateRequest": {
      "type": "object",
      "required": [
        "type",
        "attributes"
      ],
      "properties": {
        "attributes": {
          "$ref": "#/definitions/streamRequestAttributes"
        },
        "id": {
          "description": "Unique identifier of the described resource.\nDo not populate this field for POST or PATCH requests; use path parameters instead.",
          "type": "string",
          "x-go-name": "ID"
        },
        "type": {
          "description": "Valid values:\nStream operations: \"stream\"\nCondition operations: \"condition\"",
          "type": "string",
          "x-go-name": "Type"
        }
      },
      "x-go-package": "github.com/lightstep/crouton/service/api/public/v02/handlers"
    },
    "createProjectBody": {
      "type": "object",
      "properties": {
        "data": {
          "$ref": "#/definitions/createProjectRequest"
        }
      },
      "x-go-package": "github.com/lightstep/crouton/service/api/public/v02/handlers"
    },
    "createProjectRequest": {
      "type": "object",
      "required": [
        "name"
      ],
      "properties": {
        "name": {
          "type": "string",
          "x-go-name": "Name"
        }
      },
      "x-go-package": "github.com/lightstep/crouton/service/api/public/v02/handlers"
    },
    "dashboardAttributes": {
      "type": "object",
      "required": [
        "name"
      ],
      "properties": {
        "name": {
          "description": "Name for the dashboard (free-form string)",
          "type": "string",
          "x-go-name": "Name"
        },
        "streams": {
          "description": "Streams to be added to the dashboard. If the stream exists already, include the ID.\nIf it does not, do not include an ID. A new stream will be created",
          "type": "array",
          "items": {
            "$ref": "#/definitions/streamResponse"
          },
          "x-go-name": "Streams"
        }
      },
      "x-go-package": "github.com/lightstep/crouton/service/api/public/v02/handlers"
    },
    "dashboardRelationships": {
      "type": "object",
      "properties": {
        "project": {
          "$ref": "#/definitions/LinksObj"
        }
      },
      "x-go-package": "github.com/lightstep/crouton/service/api/public/v02/handlers"
    },
    "dashboardRequest": {
      "type": "object",
      "required": [
        "type"
      ],
      "properties": {
        "attributes": {
          "$ref": "#/definitions/dashboardAttributes"
        },
        "id": {
          "description": "Unique identifier of the described resource.\nDo not populate this field for POST or PATCH requests; use path parameters instead.",
          "type": "string",
          "x-go-name": "ID"
        },
        "relationships": {
          "$ref": "#/definitions/dashboardRelationships"
        },
        "type": {
          "description": "Valid values:\nStream operations: \"stream\"\nCondition operations: \"condition\"",
          "type": "string",
          "x-go-name": "Type"
        }
      },
      "x-go-package": "github.com/lightstep/crouton/service/api/public/v02/handlers"
    },
    "dashboardRequestBody": {
      "type": "object",
      "properties": {
        "data": {
          "$ref": "#/definitions/dashboardRequest"
        }
      },
      "x-go-package": "github.com/lightstep/crouton/service/api/public/v02/handlers"
    },
    "destinationRequestBodyExample": {
      "type": "object",
      "properties": {
        "data": {
          "type": "object",
          "properties": {
            "attributes": {
              "type": "object",
              "properties": {
                "channel": {
                  "description": "Required parameter for Slack only",
                  "type": "string",
                  "x-go-name": "Channel"
                },
                "custom_headers": {
                  "description": "Optional parameter for Webhook only",
                  "type": "object",
                  "additionalProperties": {
                    "type": "string"
                  },
                  "x-go-name": "CustomHeaders"
                },
                "destination_type": {
                  "description": "Required parameter. Can be one of: `\"slack\"`, `\"pagerduty\"`, and `\"webhook\"`.",
                  "type": "string",
                  "x-go-name": "DestinationType"
                },
                "integration_key": {
                  "description": "Required parameter for PagerDuty only",
                  "type": "string",
                  "x-go-name": "IntegrationKey"
                },
                "name": {
                  "description": "Required parameter",
                  "type": "string",
                  "x-go-name": "Name"
                },
                "url": {
                  "description": "Required parameter for Webhook only",
                  "type": "string",
                  "x-go-name": "URL"
                }
              },
              "x-go-name": "Attributes"
            },
            "type": {
              "description": "`Type` should be `\"destination\"`",
              "type": "string",
              "x-go-name": "Type"
            }
          },
          "x-go-name": "Data"
        }
      },
      "x-go-package": "github.com/lightstep/crouton/service/api/public/v02/handlers"
    },
    "externalLinkAttributes": {
      "type": "object",
      "properties": {
        "created_by": {
          "type": "string",
          "x-go-name": "CreatedBy"
        },
        "last_clicked_micros": {
          "$ref": "#/definitions/Micros"
        },
        "last_edited_micros": {
          "$ref": "#/definitions/Micros"
        },
        "name": {
          "$ref": "#/definitions/Name"
        },
        "rules": {
          "$ref": "#/definitions/Rules"
        },
        "url": {
          "$ref": "#/definitions/URL"
        }
      },
      "x-go-package": "github.com/lightstep/crouton/service/api/public/v02/handlers"
    },
    "externalLinkRelationships": {
      "type": "object",
      "properties": {
        "project": {
          "$ref": "#/definitions/LinksObj"
        }
      },
      "x-go-package": "github.com/lightstep/crouton/service/api/public/v02/handlers"
    },
    "externalLinkRequest": {
      "type": "object",
      "required": [
        "type"
      ],
      "properties": {
        "attributes": {
          "$ref": "#/definitions/externalLinkAttributes"
        },
        "id": {
          "description": "Unique identifier of the described resource.\nDo not populate this field for POST or PATCH requests; use path parameters instead.",
          "type": "string",
          "x-go-name": "ID"
        },
        "relationships": {
          "$ref": "#/definitions/externalLinkRelationships"
        },
        "type": {
          "description": "Valid values:\nStream operations: \"stream\"\nCondition operations: \"condition\"",
          "type": "string",
          "x-go-name": "Type"
        }
      },
      "x-go-package": "github.com/lightstep/crouton/service/api/public/v02/handlers"
    },
    "externalLinkRequestBody": {
      "type": "object",
      "properties": {
        "data": {
          "$ref": "#/definitions/externalLinkRequest"
        }
      },
      "x-go-package": "github.com/lightstep/crouton/service/api/public/v02/handlers"
    },
    "snapshotCreate": {
      "type": "object",
      "properties": {
        "data": {
          "type": "object",
          "properties": {
            "attributes": {
              "type": "object",
              "required": [
                "query"
              ],
              "properties": {
                "query": {
                  "description": "The query string itself (see Query Syntax section for details).",
                  "type": "string",
                  "x-go-name": "Query"
                }
              },
              "x-go-name": "Attributes"
            }
          },
          "x-go-name": "Data"
        }
      },
      "x-go-package": "github.com/lightstep/crouton/service/api/public/v02/handlers"
    },
    "streamAttributes": {
      "type": "object",
      "required": [
        "name"
      ],
      "properties": {
        "created-by": {
          "description": "User who created stream",
          "type": "string",
          "x-go-name": "CreatedBy"
        },
        "created-time": {
          "description": "Date+time stream was created",
          "type": "string",
          "format": "date-time",
          "x-go-name": "CreatedTime"
        },
        "custom-data": {
          "description": "Custom JSON data that can be set by an end user and will be included in notifications.",
          "type": "object",
          "additionalProperties": {
            "type": "object"
          },
          "x-go-name": "CustomData"
        },
        "data-last-received-time": {
          "description": "Date+time stream was last updated",
          "type": "string",
          "format": "date-time",
          "x-go-name": "DataLastReceivedTime"
        },
        "name": {
          "description": "Name for the stream (free-form string)",
          "type": "string",
          "x-go-name": "Name"
        },
        "query": {
          "description": "The query string itself (see Query Syntax section for details).\nOnce a stream has been created, this string cannot be modified.\n\u003cb\u003eRequired when creating new streams.\u003c/b\u003e",
          "type": "string",
          "x-go-name": "Query"
        }
      },
      "x-go-package": "github.com/lightstep/crouton/service/api/public/v02/handlers"
    },
    "streamRelationships": {
      "type": "object",
      "properties": {
        "conditions": {
          "$ref": "#/definitions/LinksObj"
        },
        "project": {
          "$ref": "#/definitions/LinksObj"
        }
      },
      "x-go-package": "github.com/lightstep/crouton/service/api/public/v02/handlers"
    },
    "streamRequestAttributes": {
      "type": "object",
      "required": [
        "name"
      ],
      "properties": {
        "custom_data": {
          "description": "Custom JSON data that can be set by an end user and will be included in notifications.",
          "type": "object",
          "additionalProperties": {
            "type": "object"
          },
          "x-go-name": "CustomData"
        },
        "name": {
          "description": "Name for the stream (free-form string)",
          "type": "string",
          "x-go-name": "Name"
        },
        "query": {
          "description": "The query string itself (see Query Syntax section for details).\nOnce a stream has been created, this string cannot be modified.\n\u003cb\u003eRequired when creating new streams.\u003c/b\u003e",
          "type": "string",
          "x-go-name": "Query"
        }
      },
      "x-go-package": "github.com/lightstep/crouton/service/api/public/v02/handlers"
    },
    "streamResponse": {
      "type": "object",
      "required": [
        "type"
      ],
      "properties": {
        "attributes": {
          "$ref": "#/definitions/streamAttributes"
        },
        "id": {
          "description": "Unique identifier of the described resource.\nDo not populate this field for POST or PATCH requests; use path parameters instead.",
          "type": "string",
          "x-go-name": "ID"
        },
        "links": {
          "$ref": "#/definitions/Links"
        },
        "relationships": {
          "$ref": "#/definitions/streamRelationships"
        },
        "type": {
          "description": "Valid values:\nStream operations: \"stream\"\nCondition operations: \"condition\"",
          "type": "string",
          "x-go-name": "Type"
        }
      },
      "x-go-package": "github.com/lightstep/crouton/service/api/public/v02/handlers"
    }
  },
  "securityDefinitions": {
    "api_key": {
      "type": "apiKey",
      "name": "Authorization",
      "in": "header"
    }
  },
  "security": [
    {
      "api_key": []
    }
  ]
}
